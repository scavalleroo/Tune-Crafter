var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useEffect, useRef, useState } from "react";
import useRegionEvent from "../hooks/useRegionEvent";
import useWavesurferContext from "../hooks/useWavesurferContext";
import { UpdatableRegionProps } from "../constants/updatableRegionProps";
export const Region = (_a) => {
    var { onOver, onLeave, onClick, onDoubleClick, onIn, onOut, onRemove, onUpdate, onUpdateEnd } = _a, props = __rest(_a, ["onOver", "onLeave", "onClick", "onDoubleClick", "onIn", "onOut", "onRemove", "onUpdate", "onUpdateEnd"]);
    const waveSurfer = useWavesurferContext();
    const isRenderedCache = useRef(false);
    const [regionRef, setRegionRef] = useState(null);
    useEffect(() => {
        return () => {
            regionRef === null || regionRef === void 0 ? void 0 : regionRef.remove();
        };
    }, [regionRef]);
    useEffect(() => {
        // If there is a regionRef, then process update on any props update
        regionRef === null || regionRef === void 0 ? void 0 : regionRef.update(UpdatableRegionProps.reduce((result, prop) => {
            if (regionRef[prop] !== props[prop]) {
                return Object.assign(Object.assign({}, result), { [prop]: props[prop] });
            }
            return result;
        }, { id: props.id }));
    }, UpdatableRegionProps.map((prop) => props[prop]));
    useEffect(() => {
        if (!isRenderedCache.current && waveSurfer) {
            isRenderedCache.current = true;
            let region;
            region = waveSurfer.regions.list[props.id];
            if (!region) {
                region = waveSurfer.addRegion(props);
            }
            setRegionRef(region);
        }
        // eslint-disable-next-line
    }, [waveSurfer]);
    useRegionEvent(regionRef, "click", onClick);
    useRegionEvent(regionRef, "mouseenter", onOver);
    useRegionEvent(regionRef, "mouseleave", onLeave);
    useRegionEvent(regionRef, "dblclick", onDoubleClick);
    useRegionEvent(regionRef, "in", onIn);
    useRegionEvent(regionRef, "out", onOut);
    useRegionEvent(regionRef, "remove", onRemove);
    useRegionEvent(regionRef, "update", onUpdate);
    useRegionEvent(regionRef, "update-end", onUpdateEnd);
    return null;
};
export default Region;
