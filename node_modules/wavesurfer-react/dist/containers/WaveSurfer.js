var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Children, useMemo } from "react";
import WaveForm from "../components/WaveForm";
import WaveSurferContext from "../contexts/WaveSurferContext";
import getWaveFormOptionsFromProps from "../utils/getWaveFormOptionsFromProps";
import useWavesurfer from "../hooks/useWavesurfer";
import isReactElement from "../utils/isReactElement";
// TODO: research on ref usage
const WaveSurfer = (_a) => {
    var { children, plugins = [], onMount } = _a, props = __rest(_a, ["children", "plugins", "onMount"]);
    // Search for WaveForm component props
    // it's making new logic compatible with old one
    const UNSTABLE_waveFormProps = useMemo(() => {
        let waveformProps = {};
        Children.forEach(children, (element) => {
            if (typeof element !== "object" || element === null || ["string", "number"].includes(typeof element)) {
                return;
            }
            // return if child does not have either props, or type
            if (!isReactElement(element))
                return;
            const { props, type: elType } = element;
            if (elType === WaveForm) {
                const { id } = props;
                waveformProps = getWaveFormOptionsFromProps(props);
                waveformProps = Object.assign(Object.assign({}, waveformProps), { container: "#" + id });
            }
        });
        return waveformProps;
    }, [children]);
    const wavesurfer = useWavesurfer(Object.assign(Object.assign({ plugins,
        // TODO: remove in future
        onMount }, props), UNSTABLE_waveFormProps));
    return (React.createElement(WaveSurferContext.Provider, { value: wavesurfer }, children));
};
WaveSurfer.defaultProps = {
    children: null,
    plugins: [],
};
export default WaveSurfer;
