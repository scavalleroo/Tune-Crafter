var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useEffect, useRef, useState } from "react";
import createWavesurfer from "../utils/createWavesurfer";
import createPlugin from "../utils/createPlugin";
import getDifference from "../utils/getDifference";
export default function useWavesurfer(_a) {
    var { container, plugins = [], onMount } = _a, props = __rest(_a, ["container", "plugins", "onMount"]);
    const usedPluginsListCache = useRef([]);
    const [wavesurfer, setWavesurfer] = useState(null);
    useEffect(() => {
        if (!container)
            return;
        let _plugins = [];
        // construct initial plugins list
        if (plugins) {
            _plugins = plugins.map(createPlugin);
        }
        usedPluginsListCache.current = _plugins;
        const ws = createWavesurfer(Object.assign(Object.assign({ container }, props), { plugins: _plugins }));
        onMount === null || onMount === void 0 ? void 0 : onMount(ws);
        setWavesurfer(ws);
        return () => {
            ws.destroy();
        };
    }, [container]);
    // TODO: update waveform appearance
    // useEffect(() => {}, [props]);
    // TODO: think about whether its place is this hook?
    useEffect(() => {
        if (wavesurfer) {
            const nextPluginsMap = plugins.map(createPlugin);
            const { disabled, enabled } = getDifference(usedPluginsListCache.current, nextPluginsMap);
            usedPluginsListCache.current = nextPluginsMap;
            disabled.forEach((plugin) => {
                if (!plugin.name)
                    return;
                wavesurfer === null || wavesurfer === void 0 ? void 0 : wavesurfer.destroyPlugin(plugin.name);
            });
            enabled.forEach((plugin) => {
                if (!plugin.name)
                    return;
                wavesurfer === null || wavesurfer === void 0 ? void 0 : wavesurfer.addPlugin(plugin).initPlugin(plugin.name);
            });
        }
    }, [plugins]);
    return wavesurfer;
}
